{"remainingRequest":"E:\\code\\m-sms\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\m-sms\\src\\components\\Widget\\Widget.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\m-sms\\src\\components\\Widget\\Widget.vue","mtime":1617030375000},{"path":"E:\\code\\m-sms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\m-sms\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\code\\m-sms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\m-sms\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Loader from '../Loader/Loader';\n\nexport default {\n  name: 'Widget',\n  data: function() {\n    return {\n      state: this.collapsed ? 'collapse' : 'default'\n    }\n  },\n  props: {\n    customHeader: { type: Boolean, default: false },\n    tooltipPlacement: { default: 'top' },\n    showTooltip: { type: Boolean, default: false },\n    close: { type: [Boolean, String], default: false },\n    fullscreen: { type: [Boolean, String], default: false },\n    collapse: { type: [Boolean, String], default: false },\n    settings: { type: [Boolean, String], default: false },\n    settingsInverse: { type: Boolean, default: false },\n    refresh: { type: [Boolean, String], default: false },\n    className: { default: '' },\n    title: { default: '' },\n    customControls: { default: null },\n    bodyClass: { default: '' },\n    options: { default: () => ({}) },\n    fetchingData: {type: Boolean, default: false},\n    showLoader: {type: Boolean, default: true},\n    collapsed: {type: Boolean, default: false},\n    autoload: {type: [Boolean, Number], default: false}\n  },\n  components: { Loader },\n  computed: {\n    randomId() {\n      return Math.floor(Math.random() * 100);\n    },\n    mainControls() {\n      return !!(this.close || this.fullscreen || this.collapse\n        || this.refresh || this.settings || this.settingsInverse);\n    },\n  },\n  mounted() {\n    if (this.autoload && this.$listeners && this.$listeners.load) {\n      this.loadWidgster();\n      if (typeof this.autoload === 'number') {\n        setInterval(() => {this.loadWidgster()}, this.autoload);\n      }\n    }\n    if (this.customControls) {\n      let close = this.$refs.customControlsRef.querySelector('[control=close]');\n      close && close.addEventListener('click', this.closeWidget);\n      let collapse = this.$refs.customControlsRef.querySelector('[control=collapse]');\n      collapse && collapse.addEventListener('click', this.changeState.bind(this, null, 'collapse'));\n      let expand = this.$refs.customControlsRef.querySelector('[control=expand]');\n      expand && expand.addEventListener('click', this.changeState.bind(this, null, 'default'));\n      let fullscreen = this.$refs.customControlsRef.querySelector('[control=fullscreen]');\n      fullscreen && fullscreen.addEventListener('click', this.changeState.bind(this, null, 'fullscreen'));\n      let restore = this.$refs.customControlsRef.querySelector('[control=restore]');\n      restore && restore.addEventListener('click', this.changeState.bind(this, null, 'default'));\n      let load = this.$refs.customControlsRef.querySelector('[control=load]');\n      load && load.addEventListener('click', this.loadWidgster);\n    }\n  },\n  methods: {\n    closeWidget(e) {\n      e && e.preventDefault();\n      let $parentEl = this.$el.parentElement;\n      let length = $parentEl.classList.length;\n      let parentToRemove = false;\n      for (let i = 0; i < length; i++) {\n        if (/col.*/.test($parentEl.classList[i])) {\n          parentToRemove = true;\n          break;\n        }\n      }\n\n      let removeFunction = () => {\n        parentToRemove ? $parentEl.remove() : this.$el.remove();\n      };\n\n      if (this.$listeners && this.$listeners.close) {\n        this.$listeners.close(removeFunction.bind(this));\n      } else {\n        removeFunction();\n      }\n    },\n    changeState(e, state) {\n      e && e.preventDefault();\n      this.state = state;\n    },\n    loadWidgster(e) {\n      e && e.preventDefault();\n      this.$emit('load');\n    }\n  }\n};\n",{"version":3,"sources":["Widget.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Widget.vue","sourceRoot":"src/components/Widget","sourcesContent":["<template>\n  <section :class=\"{\n    widget: true,\n    className,\n    collapsed: state === 'collapse',\n    fullscreened: state === 'fullscreen',\n    loading: fetchingData\n  }\" ref=\"widget\">\n    <h5 v-if=\"title && typeof title === 'string' && !customHeader\" class=\"title\">{{title}}</h5>\n    <header v-if=\"title && customHeader\" class=\"title\" v-html=\"title\"></header>\n    <div v-if=\"!customControls && mainControls\"\n      class=\"widgetControls widget-controls\">\n      <a v-if=\"settings || settingsInverse\" href=\"#\"><i class=\"la la-cog\"></i></a>\n      <a @click=\"loadWidgster($event)\" v-if=\"refresh\" href=\"#\" :id=\"`reloadId-${randomId}`\">\n        <strong v-if=\"typeof refresh === 'string'\" class=\"text-gray-light\">{{refresh}}</strong>\n        <i v-else class=\"la la-refresh\"></i>\n          <b-tooltip\n            v-if=\"showTooltip\"\n            :placement=\"tooltipPlacement\"\n            :target=\"`reloadId-${randomId}`\"\n          >Reload\n          </b-tooltip>\n      </a>\n      <a @click=\"changeState($event, 'fullscreen')\" v-if=\"fullscreen && state !== 'fullscreen'\" href=\"#\" :id=\"`fullscreenId-${randomId}`\">\n        <i class=\"glyphicon glyphicon-resize-full\"></i>\n        <b-tooltip\n          v-if=\"showTooltip\"\n          :placement=\"tooltipPlacement\"\n          :target=\"`fullscreenId-${randomId}`\"\n        >Fullscreen\n        </b-tooltip>\n      </a>\n      <a @click=\"changeState($event, 'default')\" v-if=\"fullscreen && state === 'fullscreen'\" href=\"#\" :id=\"`restoreId-${randomId}`\">\n        <i class=\"glyphicon glyphicon-resize-small\"></i>\n        <b-tooltip\n          v-if=\"showTooltip\"\n          :placement=\"tooltipPlacement\"\n          :target=\"`restoreId-${randomId}`\"\n        >Restore\n        </b-tooltip>\n      </a>\n      <span v-if=\"collapse && state !== 'collapse'\">\n        <a href=\"#\" @click=\"changeState($event, 'collapse')\" :id=\"`collapseId-${randomId}`\">\n          <i class=\"la la-angle-down\"></i>\n          <b-tooltip\n            v-if=\"showTooltip\"\n            :placement=\"tooltipPlacement\"\n            :target=\"`collapseId-${randomId}`\"\n          >Collapse\n          </b-tooltip>\n        </a>\n      </span>\n      <span v-if=\"collapse && state === 'collapse'\">\n        <a href=\"#\" @click=\"changeState($event, 'default')\" :id=\"`expandId-${randomId}`\">\n          <i class=\"la la-angle-up\"></i>\n          <b-tooltip\n            v-if=\"showTooltip\"\n            :placement=\"tooltipPlacement\"\n            :target=\"`expandId-${randomId}`\"\n          >Expand\n          </b-tooltip>\n        </a>\n      </span>\n      <a v-if=\"close\" href=\"#\" @click=\"closeWidget($event)\" :id=\"`closeId-${randomId}`\">\n        <strong v-if=\"typeof refresh === 'string'\" class=\"text-gray-light\">{{close}}</strong>\n        <i v-else class=\"la la-remove\"></i>\n        <b-tooltip\n          v-if=\"showTooltip\"\n          :placement=\"tooltipPlacement\"\n          :target=\"`closeId-${randomId}`\"\n        >Close\n        </b-tooltip>\n      </a>\n    </div>\n    <div v-if=\"customControls\" v-html=\"customControls\" ref=\"customControlsRef\" class=\"widgetControls widget-controls\"></div>\n    <div :class=\"`widgetBody widget-body ${bodyClass}`\" ref=\"widgetBodyRef\"\n          :style=\"{display: state === 'collapse' ? 'none' : ''}\"\n    >\n      <Loader v-if=\"fetchingData && showLoader\" :class=\"'widget-loader'\" :size=\"40\"></Loader>\n      <slot v-else></slot>\n    </div>\n  </section>\n</template>\n\n<script>\nimport Loader from '../Loader/Loader';\n\nexport default {\n  name: 'Widget',\n  data: function() {\n    return {\n      state: this.collapsed ? 'collapse' : 'default'\n    }\n  },\n  props: {\n    customHeader: { type: Boolean, default: false },\n    tooltipPlacement: { default: 'top' },\n    showTooltip: { type: Boolean, default: false },\n    close: { type: [Boolean, String], default: false },\n    fullscreen: { type: [Boolean, String], default: false },\n    collapse: { type: [Boolean, String], default: false },\n    settings: { type: [Boolean, String], default: false },\n    settingsInverse: { type: Boolean, default: false },\n    refresh: { type: [Boolean, String], default: false },\n    className: { default: '' },\n    title: { default: '' },\n    customControls: { default: null },\n    bodyClass: { default: '' },\n    options: { default: () => ({}) },\n    fetchingData: {type: Boolean, default: false},\n    showLoader: {type: Boolean, default: true},\n    collapsed: {type: Boolean, default: false},\n    autoload: {type: [Boolean, Number], default: false}\n  },\n  components: { Loader },\n  computed: {\n    randomId() {\n      return Math.floor(Math.random() * 100);\n    },\n    mainControls() {\n      return !!(this.close || this.fullscreen || this.collapse\n        || this.refresh || this.settings || this.settingsInverse);\n    },\n  },\n  mounted() {\n    if (this.autoload && this.$listeners && this.$listeners.load) {\n      this.loadWidgster();\n      if (typeof this.autoload === 'number') {\n        setInterval(() => {this.loadWidgster()}, this.autoload);\n      }\n    }\n    if (this.customControls) {\n      let close = this.$refs.customControlsRef.querySelector('[control=close]');\n      close && close.addEventListener('click', this.closeWidget);\n      let collapse = this.$refs.customControlsRef.querySelector('[control=collapse]');\n      collapse && collapse.addEventListener('click', this.changeState.bind(this, null, 'collapse'));\n      let expand = this.$refs.customControlsRef.querySelector('[control=expand]');\n      expand && expand.addEventListener('click', this.changeState.bind(this, null, 'default'));\n      let fullscreen = this.$refs.customControlsRef.querySelector('[control=fullscreen]');\n      fullscreen && fullscreen.addEventListener('click', this.changeState.bind(this, null, 'fullscreen'));\n      let restore = this.$refs.customControlsRef.querySelector('[control=restore]');\n      restore && restore.addEventListener('click', this.changeState.bind(this, null, 'default'));\n      let load = this.$refs.customControlsRef.querySelector('[control=load]');\n      load && load.addEventListener('click', this.loadWidgster);\n    }\n  },\n  methods: {\n    closeWidget(e) {\n      e && e.preventDefault();\n      let $parentEl = this.$el.parentElement;\n      let length = $parentEl.classList.length;\n      let parentToRemove = false;\n      for (let i = 0; i < length; i++) {\n        if (/col.*/.test($parentEl.classList[i])) {\n          parentToRemove = true;\n          break;\n        }\n      }\n\n      let removeFunction = () => {\n        parentToRemove ? $parentEl.remove() : this.$el.remove();\n      };\n\n      if (this.$listeners && this.$listeners.close) {\n        this.$listeners.close(removeFunction.bind(this));\n      } else {\n        removeFunction();\n      }\n    },\n    changeState(e, state) {\n      e && e.preventDefault();\n      this.state = state;\n    },\n    loadWidgster(e) {\n      e && e.preventDefault();\n      this.$emit('load');\n    }\n  }\n};\n</script>\n\n<style src=\"./Widget.scss\" lang=\"scss\" />\n"]}]}